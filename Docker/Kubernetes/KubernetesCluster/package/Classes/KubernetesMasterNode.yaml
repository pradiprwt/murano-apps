#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.apps.docker.kubernetes
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system

Name: KubernetesMasterNode

Extends: KubernetesNode

Properties:
  maxMinionCount:
    Contract: $.string()
  minionCount:
    Contract: $.string()
  maxCPUusage:
    Contract: $.string()
  minCPUusage:
    Contract: $.string()
  openstackIP:
    Contract: $.string()
  tenantName:
    Contract: $.string()
  userName:
    Contract: $.string()
  userPassword:
    Contract: $.string()
  enableGCP:
    Contract: $.bool()
    Default: false
  gcpMinionNodes:
    Contract: $.string()
  gcpNodes:
    Contract: $.string()
  gcpUserName:
    Contract: $.string()
  gcpPassword:
    Contract: $.string()

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()


  deployInstance:
    Body:
      - If: not $.getAttr(instanceDeployed, false)
        Then:
          - $._environment.reporter.report($this, 'Creating Kubernetes Master')
          - $.super($.deployInstance())
          - $.setAttr(instanceDeployed, true)


  setupEtcd:
    Body:
      - If: not $.getAttr(etcdConfigured, false)
        Then:
          - $._environment.reporter.report($, 'Configuring etcd master node')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('MasterEtcdSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(etcdConfigured, true)


  setupNode:
    Body:
      - If: not $.getAttr(nodeConfigured, false)
        Then:
          - $resources: new(sys:Resources)
          - $._environment.reporter.report($this, 'Setup Flannel network on master node')
          - $template: $resources.yaml('SetupFlannelMaster.template')
          - $.instance.agent.call($template, $resources)

          - $._environment.reporter.report($this, 'Setup Kubernetes API host')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('KubeMasterSetup.template').bind(dict(
                name => $.instance.name,
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(nodeConfigured, true)
          - $msg: 'Kubernetes API is now available at http://{0}:8080'
          - $ip: coalesce($.instance.floatingIpAddress, $.getIp())
          - $._environment.reporter.report($this, $msg.format($ip))


  setupAutoscale:
    Body:
      - If: not $.getAttr(autoscaleConfigured, false)
        Then:
          - $._environment.reporter.report($this, 'Setup Auto Scale on Master node')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('AutoScale.template').bind(dict(
                maxMinionCount => $.maxMinionCount,
                minionCount => $.minionCount,
                maxCPUusage => $.maxCPUusage,
                minCPUusage => $.minCPUusage,
                ip => $.getIp(),
                environmentName =>  $._environment.name,
                openstackIP => $.openstackIP,
                tenantName => $.tenantName,
                userName => $.userName,
                userPassword => $.userPassword,
                enableGCP => $.enableGCP,
                gcpMinionNodes => $.gcpMinionNodes,
                gcpNodes => $.gcpNodes,
                gcpUserName => $.gcpUserName,
                gcpPassword => $.gcpPassword
              ))
          - $.instance.agent.call($template, $resources)
          - $.setAttr(autoscaleConfigured, true)


  addGceNode:
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('AddGceNode.template')
      - $.instance.agent.call($template, $resources)


  deleteGceNode:
    Body:
      - $resources: new(sys:Resources)
      - $template: $resources.yaml('DeleteGceNode.template')     
      - $.instance.agent.call($template, $resources)


  isAvailable:
    Body:
      Return: $.instance.isDeployed()

